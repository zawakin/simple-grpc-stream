// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uppercase_stream.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InputMessage struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InputMessage) Reset()         { *m = InputMessage{} }
func (m *InputMessage) String() string { return proto.CompactTextString(m) }
func (*InputMessage) ProtoMessage()    {}
func (*InputMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3591a39c3f1bb1c3, []int{0}
}

func (m *InputMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputMessage.Unmarshal(m, b)
}
func (m *InputMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputMessage.Marshal(b, m, deterministic)
}
func (m *InputMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputMessage.Merge(m, src)
}
func (m *InputMessage) XXX_Size() int {
	return xxx_messageInfo_InputMessage.Size(m)
}
func (m *InputMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InputMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InputMessage proto.InternalMessageInfo

func (m *InputMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type OutputMessage struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutputMessage) Reset()         { *m = OutputMessage{} }
func (m *OutputMessage) String() string { return proto.CompactTextString(m) }
func (*OutputMessage) ProtoMessage()    {}
func (*OutputMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3591a39c3f1bb1c3, []int{1}
}

func (m *OutputMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputMessage.Unmarshal(m, b)
}
func (m *OutputMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputMessage.Marshal(b, m, deterministic)
}
func (m *OutputMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputMessage.Merge(m, src)
}
func (m *OutputMessage) XXX_Size() int {
	return xxx_messageInfo_OutputMessage.Size(m)
}
func (m *OutputMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OutputMessage proto.InternalMessageInfo

func (m *OutputMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*InputMessage)(nil), "api.InputMessage")
	proto.RegisterType((*OutputMessage)(nil), "api.OutputMessage")
}

func init() { proto.RegisterFile("uppercase_stream.proto", fileDescriptor_3591a39c3f1bb1c3) }

var fileDescriptor_3591a39c3f1bb1c3 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x2d, 0x28, 0x48,
	0x2d, 0x4a, 0x4e, 0x2c, 0x4e, 0x8d, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x52, 0xe2, 0xe2, 0xf1, 0xcc, 0x2b, 0x28, 0x2d,
	0xf1, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe2, 0x62, 0x29, 0x49, 0xad, 0x28, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x94, 0xb9, 0x78, 0xfd, 0x4b, 0x4b, 0xf0,
	0x2b, 0x32, 0xf2, 0xe3, 0x12, 0x08, 0x05, 0xd9, 0xe3, 0x9c, 0x58, 0x9c, 0x1a, 0x9c, 0x5a, 0x54,
	0x96, 0x99, 0x9c, 0x2a, 0x64, 0xc5, 0xc5, 0x1d, 0x92, 0x0f, 0x17, 0x15, 0x12, 0xd4, 0x4b, 0x2c,
	0xc8, 0xd4, 0x43, 0xb6, 0x4e, 0x4a, 0x08, 0x2c, 0x84, 0x62, 0xba, 0x12, 0x83, 0x06, 0xa3, 0x01,
	0x63, 0x12, 0x1b, 0xd8, 0x91, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0x58, 0x66, 0xa7,
	0xbe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpperCaseServiceClient is the client API for UpperCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpperCaseServiceClient interface {
	ToUpperCase(ctx context.Context, opts ...grpc.CallOption) (UpperCaseService_ToUpperCaseClient, error)
}

type upperCaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpperCaseServiceClient(cc *grpc.ClientConn) UpperCaseServiceClient {
	return &upperCaseServiceClient{cc}
}

func (c *upperCaseServiceClient) ToUpperCase(ctx context.Context, opts ...grpc.CallOption) (UpperCaseService_ToUpperCaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpperCaseService_serviceDesc.Streams[0], "/api.UpperCaseService/ToUpperCase", opts...)
	if err != nil {
		return nil, err
	}
	x := &upperCaseServiceToUpperCaseClient{stream}
	return x, nil
}

type UpperCaseService_ToUpperCaseClient interface {
	Send(*InputMessage) error
	Recv() (*OutputMessage, error)
	grpc.ClientStream
}

type upperCaseServiceToUpperCaseClient struct {
	grpc.ClientStream
}

func (x *upperCaseServiceToUpperCaseClient) Send(m *InputMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upperCaseServiceToUpperCaseClient) Recv() (*OutputMessage, error) {
	m := new(OutputMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpperCaseServiceServer is the server API for UpperCaseService service.
type UpperCaseServiceServer interface {
	ToUpperCase(UpperCaseService_ToUpperCaseServer) error
}

// UnimplementedUpperCaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpperCaseServiceServer struct {
}

func (*UnimplementedUpperCaseServiceServer) ToUpperCase(srv UpperCaseService_ToUpperCaseServer) error {
	return status.Errorf(codes.Unimplemented, "method ToUpperCase not implemented")
}

func RegisterUpperCaseServiceServer(s *grpc.Server, srv UpperCaseServiceServer) {
	s.RegisterService(&_UpperCaseService_serviceDesc, srv)
}

func _UpperCaseService_ToUpperCase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpperCaseServiceServer).ToUpperCase(&upperCaseServiceToUpperCaseServer{stream})
}

type UpperCaseService_ToUpperCaseServer interface {
	Send(*OutputMessage) error
	Recv() (*InputMessage, error)
	grpc.ServerStream
}

type upperCaseServiceToUpperCaseServer struct {
	grpc.ServerStream
}

func (x *upperCaseServiceToUpperCaseServer) Send(m *OutputMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upperCaseServiceToUpperCaseServer) Recv() (*InputMessage, error) {
	m := new(InputMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UpperCaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.UpperCaseService",
	HandlerType: (*UpperCaseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ToUpperCase",
			Handler:       _UpperCaseService_ToUpperCase_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "uppercase_stream.proto",
}
